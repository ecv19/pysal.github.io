Getting Started with PySAL
==========================

For Users
---------

Users can begin the journey with PySAL by exploring the courses, workshops, tutorials, and presentations:

Courses, Workshops, and Tutorials
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


* `SciPy 2018 <https://www.youtube.com/watch?v=kJXUUO5M4ok>`_
* `GeoPython 2018 <https://github.com/ljwolf/geopython>`_
* `NARSC 2017 <https://github.com/sjsrey/pysalnarsc17>`_
* `SciPy 2016 <https://www.youtube.com/watch?v=TY4QWnnd4jY>`_
* `UCGIS 2016 <https://github.com/sjsrey/ucgis_workshop_2016>`_
* `NARSC 2015 <https://github.com/sjsrey/pysal_narsc_2015>`_
* `AUERS 2015 <https://github.com/pysal/notebooks/tree/aerus2015>`_
* `Tour of PySAL 2015 <https://www.youtube.com/watch?v=vXnEH5pFxtY>`_
* `FOSS4G 2015 <https://2015.foss4g-na.org/session/hands-introduction-spatial-data-analysis-python>`_
* `MASGIS 2015 <https://github.com/pysal/notebooks/tree/masgis_2015>`_
* `FOSS4G 2014 <https://github.com/sjsrey/foss4g14>`_
* `GIScience 2014 <https://github.com/pysal/notebooks/tree/giscience14>`_
* `NARSC 2013 <https://github.com/sjsrey/narsc2013_pysal_workshop>`_

Presentations
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* `SciPy 2018 p <https://www.youtube.com/watch?v=VWMj_rNb0io>`_
* `SciPy 2015 <https://www.youtube.com/watch?v=rfQ0LIaOgQs>`_
* `CyberGIS 2013 <https://www.youtube.com/watch?v=piB7zTADzcE>`_
* `ESRI UC 2012 <http://video.esri.com/watch/1925/integrating-open_dash_source-statistical-packages-with-arcgis>`_
* `SciPy 2012 <https://www.youtube.com/watch?v=FN1nH4Fkd_Y>`_
* `PyCon 2012 US <http://pyvideo.org/video/676/python-for-data-lovers-explore-it-analyze-it-m>`_
* `SciPy 2009 <https://archive.org/details/scipy09_day2_10-Serge_Rey>`_

For developers
--------------

Developers for PySAL and its submodules are expected to follow `Github Standard Operating Procedures <https://github.com/pysal/pysal/wiki/GitHub-Standard-Operating-Procedures>`_


In order for packages to be included into `pysal` as a submodule, it must follow the Submodule Contract below:



.. _PySAL-Submodule-contract:

Submodule Contract
^^^^^^^^^^^^^^^^^^^^^^^^

Python version
~~~~~~~~~~~~~~~~~~~~~

- must support python 3.

Structure
~~~~~~~~~~~~~~~~~~~~~

- must be organized in the same hierarchy as `the submodule template <https://github.com/pysal/submodule_template>`_. Note specifically:
- **tests** inside of the package, rather than outside.
- **data** within tests is only referred to by tests, and is used as comparison output for testing.
- **notebooks** is outside of the package.

Documentation & testing
~~~~~~~~~~~~~~~~~~~~~~~~

- must have unittesting on user-facing classes (those exposed by the API)
- must have docstrings for all user-facing functions
- must run these tests nightly (using either `nightli.es <https://nightli.es>`_ or CRON jobs on travis)
- must have three notebooks in `notebooks`
- must host documentation (see the next section for guidelines of building a doc website)

Code Standards
~~~~~~~~~~~~~~~~~~~~~~~~

- must refer to data in `lib.examples`
- must only have module-level imports that the package supports in its `requirements.txt`
- must write ``from submodule import function`` instead of ``import submodule.function`` if it wants to use a function of a PySAL submodule
- all function-level imports (those made at the top of a function) must be decorated with the `requires decorator <https://github.com/pysal/libpysal/blob/master/libpysal/common.py#L104>`_ or raises an explicit exception (i.e. `raise ImportError('this function requires `PACKAGE`, which is not installed.')) if its requirements are not met.
- must be pep8 compliant. We recommend using `autopep8 <https://github.com/hhatto/autopep8>`_ to automatically convert non-compliant code, and using `flake8 <http://flake8.pycqa.org/en/latest/>`_ thereafter.

.. _PySAL-submodule-docs:

Building a sphinx doc website for the submodule
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Building documentation for Python docstrings
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following Sphinx extensions will be used for parsing docstrings and semi-automatically pulling in documentation
from docstrings:

- `sphinx.ext.autodoc <http://www.sphinx-doc.org/en/stable/ext/autodoc.html>`_
- `numpydoc <http://numpydoc.readthedocs.io/en/latest/>`_


Bibliography and cross-reference
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

We leverage the functionality provided by the Sphinx extension for BibTeX
style citations `sphinxcontrib-bibtex <http://sphinxcontrib-bibtex
.readthedocs.io/en/latest/index.html#>`_ to quickly and conveniently build a
reference list which could be for those cited in a particular webpage or a
bunch of webpages by feeding with a bib file.

Example gallery
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Building a gallery of examples for your package could be very rewarding.
We utilize the Sphinx extension `sphinx_gallery.gen_gallery
<https://sphinx-gallery.github.io>`_ to build a gallery from Python scripts.






