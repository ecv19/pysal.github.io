Getting Started with PySAL
==========================

.. _PySAL-Submodule-contract:

Submodule contract
------------------

In order for packages to be included into `PySAL` as a submodule, it:

- must have unittesting on user-facing classes
- must have docstrings for all user-facing functions
- must run these tests nightly
- must have three notebooks in `notebooks`
- must refer to data in `lib.examples`
- must only have module-level imports that the package supports in its `requirements.txt`
- must write ``from submodule import function`` instead of ``import submodule.function`` if it wants to use a function of a PySAL submodule

.. _PySAL-submodule-docs:

Building a sphinx doc website for the submodule
-----------------------------------------------

Building Python docstrings
^^^^^^^^^^^^^^^^^^^^^^^^^^

The following Sphinx extensions will be used for parsing docstrings and semi-automatically pulling in documentation
from docstrings:

- `sphinx.ext.autodoc <http://www.sphinx-doc.org/en/stable/ext/autodoc.html>`_
- `numpydoc <http://numpydoc.readthedocs.io/en/latest/>`_

Example gallery
^^^^^^^^^^^^^^^

Building a gallery of examples similar to what `seaborn <https://seaborn.pydata
.org/examples/index.html>`_ has done for your package could be very rewarding.
We utilize the Sphinx extension `sphinx_gallery.gen_gallery
<https://sphinx-gallery.github.io>`_ to build a gallery from Python scripts.



Bibliography and cross-reference
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

We leverage the functionality provided by the Sphinx extension for BibTeX
style citations `sphinxcontrib-bibtex <http://sphinxcontrib-bibtex
.readthedocs.io/en/latest/index.html#>`_ to quickly and conveniently build a
reference list which could be for those cited in a particular webpage or a
bunch of webpages by feeding with a bib file.



